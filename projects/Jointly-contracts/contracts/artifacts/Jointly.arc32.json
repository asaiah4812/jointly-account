{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "authorizeOnlyCreator()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addMember(pay,address,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAsset()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setProposal(pay,address,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote(bool,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "counter": {
          "type": "uint64",
          "key": "counter"
        },
        "registeredAssetCreated": {
          "type": "uint64",
          "key": "registeredAssetCreated"
        },
        "proposerAddress": {
          "type": "bytes",
          "key": "proposerAddress"
        },
        "proposerName": {
          "type": "bytes",
          "key": "proposerName"
        },
        "proposal": {
          "type": "bytes",
          "key": "proposal"
        },
        "totalVote": {
          "type": "uint64",
          "key": "totalVote"
        },
        "votesInFavor": {
          "type": "uint64",
          "key": "votesInFavor"
        },
        "votesAgainst": {
          "type": "uint64",
          "key": "votesAgainst"
        },
        "totalMembers": {
          "type": "uint64",
          "key": "totalMembers"
        },
        "executed": {
          "type": "bytes",
          "key": "executed"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Jointly",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "authorizeOnlyCreator",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addMember",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "memberAddress",
            "type": "address"
          },
          {
            "name": "memberName",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getAsset",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "setProposal",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "proposerAddress",
            "type": "address"
          },
          {
            "name": "proposerName",
            "type": "string"
          },
          {
            "name": "proposal",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "vote",
        "args": [
          {
            "name": "inFavor",
            "type": "bool"
          },
          {
            "name": "memberAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}